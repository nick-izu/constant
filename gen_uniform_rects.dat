/*=========================================================================*/
/*  General Options & Fracture Network Parameters:                         */
/*=========================================================================*/

stopCondition: 0
/*  0: Stop once nPoly fractures are accepted (Defined below)
    1: Stop once all family's p32 values are equal or greater than the
       families target p32 values (defined in stochastic family sections)
*/             

nPoly: 80
/*  Used when stopCondition = 0 (nPoly option).

    The total number of fractures you would
    like to have in the DFN.  
*/

domainSize: {10,10,10} 
/*  Mandatory Parameter.
    Creates a domain with dimension x*y*z centered at the origin.
*/


orientationOption: 1
/* Fracture Orientation Option
    0 : Spherical Coordinates
    1 : Trend / Plunge 
    2 : Dip / Strike 
*/



numOfLayers: 0     //  Number of layers

layers:
{}

/*  Layers need to be listed line by line
    Format: {minZ, maxZ}
    
    The first layer listed is layer 1, the second is layer 2, etc
    Stochastic families can be assigned to theses layers (see stochastic
    shape family section) 
*/   


numOfRegions: 0 // Number of regions
regions: 
{}

/*  Regions need to be listed line by line
    Format: {minX, maxX, minY, maxY, minZ, maxZ}
    
    The first region listed is region 1, the second is region 2, etc
    Stochastic families can be assigned to theses layers (see stochastic
    shape family section) 
*/   

removeFracturesLessThan: 0

/*
    Options:
        0 - Ignore this option, keep all fractures.

        Size of minimum fracture radius. Fractures smaller than
        defined radius will be removed AFTER DFN generation.

        Minimum and maximum size options under fracture family
        distributions will still be used while generating the DFN.
*/


/*  Layers need to be listed line by line
    Format: {minZ, maxZ}
    
    The first layer listed is layer 1, the second is layer 2, etc
    Stochastic families can be assigned to theses layers (see stochastic
    shape family section) 
*/   

h: 0.1
/*  Minimum fracture length scale(meters).
    Any fracture with a feature, such as and intersection, 
    of less than h will be rejected. 
*/


radiiListIncrease: 0.1
/*  Percent to increase the size of the pre-generated radii lists, per family. 
    Example: 0.2 will increase the size of the list by %20.

    Lists are pre-generated and are used to insert fractures from largest to 
    smallest in order to help hit target distributions.  
    
    If the accepted+rejected count of fractures is much different than the
    estimated number of fractures needed with the percentage extra added in, 
    you will not get your expected distribution. 
      
*/


/*==========================================================================*/
/*  File Output Options:                                                    */
/*==========================================================================*/

/* An output file (radii.dat) is always generated and contains all radii of
   fractures in the domain (before and after truncation).
*/

outputAllRadii: 0  
/*  Caution: Can create very large files.
    Outputs all fractures which were generated during 
    DFN generation (Accepted + Rejected).
        0: Do not output all radii file.
        1: Include file of all raddii, acepted + rejected fractures,
           in output files (radii_All.dat).
*/


outputFinalRadiiPerFamily: 1
/*  Outputs radii files after isolated fracture removal.
    One file per family.
        0: Do not create output files of radii per family
        1: Creates output files per family, containing a list 
           of the family's fracture radii that is in the final DFN
*/

outputAcceptedRadiiPerFamily: 1
/*  Outputs radii files before isolated fracture removal.
    One file per family.
        0: Do not create output files of radii per family
        1: Creates output files per family, containing a list
           of the family's fracture radii in the domain before isolated
           fracture removal.         
*/ 

/*==========================================================================*/
/*  Fracture Network Parameters:                                            */
/*==========================================================================*/

tripleIntersections: 0
/*  Accept or reject triple intersections
        0 - Off (Reject)
        1 - On  (Accept)  
*/

forceLargeFractures: 0
/*  Inserts the largest possible fracture for each defined fracture family, 
    defined by the user-defined maximum radius
        0 - Off (Do not force insertion of largest fractures)
        1 - On  (Force insertion of largest fractures)
*/

printRejectReasons: 0
/* Useful for debugging, 
   This option will print all fracture rejection reasons as they occur.
        0 - Disable
        1 - Print all rejection reasons to screen
*/

disableFram: 0
/* This option disables the FRAM algorithm. There will be no 
   fracture rejections or fine mesh. Defaults visualizationMode to 0.
        0 - FRAM is on
        1 - FRAM is off
*/

visualizationMode: 0
/*  Used during meshing: 
        0 - Creates a fine mesh, according to h parameter;
        1 - Produce only first round of triangulations. In this case no 
            modeling of flow and transport is possible. 
*/ 

seed: 2
/*  Seed for random generator. 
    Enter 0 for time based seed.
*/        

domainSizeIncrease: {0,0,0} 
/*  Size increase for inserting fracture centers outside the domain.
    Fracture will be truncated based on domainSize above. 
    Increases the entire width by this ammount. So, {1,1,1} will increase
    the domain by adding .5 to the +x, and subbtracting .5 to the -x, etc
*/

keepOnlyLargestCluster: 0
/*  0 - Keep any clusters which connects the specified 
        boundary faces in boundaryFaces option below
    1 - Keep only the largest cluster which connects 
        the specified boundary faces in boundaryFaces option below.

    If ignoreBoundaryFaces is also set to 1, DFNGen will keep the largest
    cluster which connects at least any two sides of the domain.
*/

keepIsolatedFractures: 0
/*  0 - Remove any isolated fracture (not clusters)
    1 - Keep all fractures in the domain
*/

ignoreBoundaryFaces: 0
  
/*
     0 - Use boundaryFaces option below 
     1 - Ignore boundaryFaces option and keep all clusters,
         and remove fractures with no intersections               
*/
          
boundaryFaces: {1,1,0,0,0,0}
/*  DFN will only keep clusters with connections to 
    domain boundaries which are set to 1:

    boundaryFaces[0] = +X domain boundary
    boundaryFaces[1] = -X domain boundary
    boundaryFaces[2] = +Y domain boundary
    boundaryFaces[3] = -Y domain boundary
    boundaryFaces[4] = +Z domain boundary
    boundaryFaces[5] = -Z domain boundary    
    
    Be sure to set ignoreBoundaryFaces to 0 when 
    using this feature.     
*/
                          
rejectsPerFracture: 350  
/*  If a fracture is rejected, it will be re-translated
    to a new position this number of times. 

    This helps hit distribution targets for stochastic families
    families (Set to 1 to ignore this feature)
*/


/*===========================================================================*/
/*  Shape and Probability Parameters                                         */
/*===========================================================================*/

famProb: {0.25, 0.25, 0.5} 


/*  Each element is the probability of chosing a fracture from 
    the element's corresponding family to be inserted into the DFN.

    The famProb elements should add up to 1.0 (for %100).
    The probabilities are listed in order of families starting with all
    stochastic ellipses, and then all stochastic rectangles.
   
    For example: 
    If  then there are two ellipse families, each with probabiliy .3, 
    and two rectangle families, each with probabiliy .2, famProb will be:
    famProb: {.3,.3,.2,.2}, famProb elements must add to 1         
*/
 
insertUserRectanglesFirst: 1
/*  0 - User ellipses will be inserted first
    1 - User rectangles will be inserted first
*/
 

/*===========================================================================*/
/*===========================================================================*/
/*                                                                           */
/*  Elliptical Fracture Options                                              */
/*  NOTE: Number of elements must match number of ellipse families           */
/*                                                                           */
/*===========================================================================*/
/*===========================================================================*/

nFamEll: 0
/*  Number of ellipse families defined below.
    Having this option = 0 will ignore all rectangle family variables.
*/

eLayer: {0,0}
/*  Defines which domain, or layer, the family belings to.
    Layer 0 is the entire domain ('domainSize').
    Layers numbered > 0 coorespond to layers defined above (see 'Layers:').
    1 corresponts to the first layer listed, 2 is the next layer listed, etc 
*/

eRegion: {0,0}
    /* Defines which domain the family belongs to.
     Region 0 is the entire domain.
     Regions numbered > 0 correspond to layers defined above
     1 correspond to the first region listed, 2 is the next region listed, etc */


edistr: {2,3}   
/*  Mandatory parameter if using statistically generated ellipses. 
    Statistical distribution options:
        1 - Log-normal distribution
        2 - Truncated power law distribution   
        3 - Exponential distribution
        4 - Constant 
*/                                                                                       
                      
ebetaDistribution: {0,0}   
/*  Beta is the rotation around the polygon's normal vector
        0 - Uniform distribution [0, 2PI)
        1 - Constant angle (specefied below by 'ebeta')
*/  
    
e_p32Targets: {.1,.1} 
/*  Elliptical families target fracture intensity per family. 
    When using stopCondition = 1 (defined at the top of the input file), 
    families will be inserted until the families desired fracture 
    intensity has been reached. Once all families desired fracture 
    intensity has been met, fracture generation will complete.
*/

               
/*===========================================================================*/
/* Parameters used by all stochastic ellipse families                        */
/* Mandatory Parameters if using statistically generated ellipses            */ 
/*===========================================================================*/

easpect: {1.1,1.2}  
//  Aspect ratio for stochastic ellipses.

enumPoints: {8, 12} 
/*  Number of vertices used in creating each elliptical 
    fracture family. Number of elements must match number 
    of ellipse families  
*/

eAngleOption: 0     
/*  All angles for ellipses are in: 
        0 - radians (Must use numerical value for PI) 
        1 - degrees
*/
                        
etheta: {0, 45} 
/*  Ellipse fracture orientation.
    The angle the normal vector makes with the z-axis,
*/

ephi: {0,0}   
/*  Ellipse fracture orientation.
    The angle the projection of the normal
    onto the x-y plane makes with the x-axis 
*/

ebeta: {0, 0}   
//  Rotation around the fractures' normal vector.

ekappa: {8,10}  
/*  Parameter for the fisher distribnShaprutions. The 
    bigger, the more similar (less diverging) are the 
    elliptical familiy's normal vectors. 
*/


/*===========================================================================*/
/*  Ellipse Log-normal Distribution Options (edistr = 1)                     */
/*  Mandatory Parameters if using ellispes with log-normal distribution      */
/*===========================================================================*/

eLogMean: {4}  
//  Mean of the underlying normal distribution
               
esd: {1} 
//  Standard deviation of the underlying normal distribution

eLogMin: {1}
//  Minimum radius

eLogMax: {15}
//  Maximum radius


/*===========================================================================*/
/*  Ellipse Exponential Distribution Options (edistr = 3)                    */
/*  Mandatory Parameters if using ellispes with exponential distribution     */
/*===========================================================================*/

eExpMean: {2}  
//  Mean values for exponential distributions, defined per family.

eExpMin: {1}
//  Minimum radius, defined per family.

eExpMax: {10}
// Maximum radius, defined per family.


/*===========================================================================*/
/*  Ellipse Constant Size Option (edistr=4)                                  */ 
/*  Mandatory Parameters if using ellipses with constant size.               */
/*===========================================================================*/

econst: {10}  
//  Constant radius, defined per family.


/*===========================================================================*/
/*  Ellipse Truncated Power-Law Distribution Options (edistr=2)              */
/*  Mandatory Parameters if using ellipses with power-law distributions.     */
/*===========================================================================*/

emin: {1} 
//  Minimum radius

emax: {6}  
//  Maximum radius
                    
ealpha: {2.4} 
//  Alpha. Used in truncated power-law distribution calculations.


/*============================================================================*/
/*============================================================================*/
/*                                                                            */
/*  Rctangular Fractures Options                                              */
/*  NOTE: Number of elements must match number of rectangle families          */
/*                                                                            */
/*============================================================================*/
/*============================================================================*/

nFamRect: 3
/*  Number of rectangular families defined below.
    Having this option = 0 will ignore all rectangular family variables.
*/

rLayer: {0,0,0}
/*  Defines which domain, or layer, the family belongs to.
    Layer 0 is the entire domain ('domainSize').
    Layers numbered > 0 corresponds to layers defined above (see 'Layers:').
    1 corresponds to the first layer listed, 2 is the next layer listed, etc 
*/

rRegion: {0,0,0}
    /* Defines which domain the family belongs to.
     Region 0 is the entire domain.
     Regions numbered > 0 correspond to layers defined above
     1 corresponds to the first region listed, 2 is the next region listed, etc */



rdistr: {4,4,4}   
/*  Mandatory parameter if using statistically generated rectangles.
    Rectangle statistical distribution options:
        1 - log-normal distribution
        2 - truncated power law distribution 
        3 - exponential distribution
        4 - constant 
*/

rbetaDistribution: {1,1,1}  
/*  Beta is the rotation around the polygon's normal vector
        0: Uniform distribution [0, 2PI)
        1: Constant angle (specefied below by 'rbeta')
*/                
                
r_p32Targets: {.3,.3}
/*  Rectangular families target fracture intensity per family. 
    When using stopCondition = 1 (defined at the top of the input file), 
    families will be inserted until the families desired fracture 
    intensity has been reached. Once all families desired fracture 
    intensity has been met, fracture generation will complete.
*/                


/*===========================================================================*/
//  Parameters used by all stochastic rectangle families                     */
//  Mandatory Parameters if using statistically generated rectangles         */
/*===========================================================================*/

raspect: {1,1,1}  
//  Aspect ratio for stochastic rectangles.
 
rAngleOption: 1
/*  All angles for rectangles are in: 
        1 - Degrees
        0 - Radians (must be numerical value, cannot use "Pi") 
*/
 
rplunge: {0, 90, 45}
/*  Rectangle fracture orientation.
    The angle the normal vector makes with the z-axis 
*/

rtrend: {0, 35, 70} 
/*  Rectangle fracture orientation.
    The angle the projection of the normal
    onto the x-y plane makes with the x-axis 
*/
      
rbeta: {0,0,0}   
//  Rotation around the normal vector.

rkappa:{20,20,20}   
/*  Parameter for the fisher distribnShaprutions. The 
    bigger, the more similar (less diverging) are the 
    rectangular familiy's normal vectors.
*/


/*===========================================================================*/
// Rectangle Log-normal Distribution Options (rdistr = 1)                    */
// Mandatory Parameters if using rectangles with log-normal distribution     */
/*===========================================================================*/

rLogMean: {1.,1. }    
//  Mean of the underlying normal distribution

rsd: {0.5, 0.5 }     
//  Standard deviation of the underlying normal distribution
                      
rLogMin: {0.5, 0.5}
//  Minimum radius

rLogMax: {50.0, 50.0}   
//  Maximum radius                 


/*===========================================================================*/
// Rectangle Truncated Power-Law Distribution Options (rdistr=2)             */
// Mandatory Parameters if using rectangles with power-law distributions.    */
/*===========================================================================*/

rmin: {0.5, 0.5,0.5,0.5,0.5,0.5}  
//  Minimum radius

rmax: {125,125,125,125,125,125}    
//  Maximum radius

ralpha: {2.0,2.6,2.01,2.0,2.6,2.01}  
//  Alpha. Used in truncated power-law distribution calculations.


/*===========================================================================*/
/* Rectangle Exponential Distribution Options (edistr=3)                     */
/* Mandatory Parameters if using rectangules with exponential distribution   */
/*===========================================================================*/

rExpMean: {3.373,3.373,3.373}
//  Mean radius

rExpMin: {0.5, 0.5, 0.5}
//  Minimum radius

rExpMax: {125.0, 125.0, 125.0}
//  Maximum radius


/*===========================================================================*/
/* Rectangle Constant Size of rectangles (edistr = 4)                        */
/*===========================================================================*/
rconst: {2,2,2}  
//  Constant radius, defined per family.
               

/*===========================================================================*/
/*===========================================================================*/
/*  User-Specified Ellipses                                                  */
/*  Mandatory Parameters if using user-ellipses                              */
/*  NOTE: Number of elements must match number of user-ellipse families.     */
/*  NOTE: Only one user-ellipse is placed into the domain per defined        */
/*        user-ellipse, with possibility of being rejected                   */
/*===========================================================================*/
/*===========================================================================*/
  
userEllipsesOnOff: 0
/*  0 - User Ellipses off
    1 - User Ellipses on
*/

UserEll_Input_File_Path: ./inputFiles/userPolygons/uEllInput.dat


/*===========================================================================*/
/*===========================================================================*/
/*  User-Specified Rectangles                                                */
/*  NOTE: Number of elements must match number of user-ellipse families      */
/*  NOTE: Only one user-rectangle is placed into the domain per defined      */ 
/*        user-rectangle, with possibility of being rejected                 */
/*===========================================================================*/
/*===========================================================================*/

userRectanglesOnOff: 0    
/*  0 - User Rectangles off
    1 - User Rectangles on
*/

UserRect_Input_File_Path: ./inputFiles/userPolygons/uRectInput.dat


/*===========================================================================*/
/*===========================================================================*/
/*                                                                           */
/*  User Rectangles Defined By Coordinates                                   */
/*                                                                           */
/*===========================================================================*/
/*===========================================================================*/

userRecByCoord: 0
/*  0 - User defined rectangles by coordinates off
    1 - User defined rectangles by coordinates on
*/

RectByCoord_Input_File_Path: ./inputFiles/userPolygons/rectCoords.dat

/*  WARNING: This option can cause LaGriT errors because the polygon
             vertices are not put in clockwise or counter-clockwise order.
             If errors (Usualy seg fualt during meshing with LaGriT),
             make sure the vertices are in clockwise or counter clockwise
             order. Also, coordinates must be co-planar.
*/

userEllByCoord: 0

EllByCoord_Input_File_Path: ./inputFiles/userPolygons/rectCoords.dat

/*===========================================================================*/
/*===========================================================================*/
/*                                                                           */
/*  User Polygon Defined By Coordinates                                   */
/*                                                                           */
/*===========================================================================*/
/*===========================================================================*/

userPolygonByCoord: 0
/*  0 - User defined polygon by coordinates off
    1 - User defined polygon by coordinates on
*/

PolygonByCoord_Input_File_Path: ./

/*WARNING: userDefCoordRec can cause LaGriT errors because the polygon 
vertices are not put in clockwise or counter-clockwise order.
If errors (Usualy seg fualt during meshing if using LaGriT), 
try to reorder the points till u get it right.
Also, coordinates must be co-planar */

/*===========================================================================*/
/*===========================================================================*/
/*  Aperture Options                                                         */
/*  Mandatory Parameter                                                       */
/*  NOTE: Only one aperture type may be used at a time                       */
/*===========================================================================*/
/*===========================================================================*/

aperture: 2
/*  1 - Log-normal distribution
    2 - Aperture from transmissivity, first transmissivity is defined, 
        and then, using a cubic law, the aperture is calculated.
    3 - Constant aperture (same aperture for all fractures)
    4 - Length Correlated Aperture
        Apertures are defined as a function of fracture size.
*/


/*===========================================================================*/
/*  Log-normal Aperture Distribution Options (aperture = 1)                  */
/*===========================================================================*/

meanAperture:  3 
//  Mean value 

stdAperture: 0.8  
//  Standard deviation     


/*===========================================================================*/
/*  Aperture From Transmissivity Options (aperture = 2)                      */
/*===========================================================================*/

apertureFromTransmissivity: {5.0e-8, 1.3681}
/*  Transmissivity is calculated as transmissivity = F*R^k,
    where F is a first element in aperturefromTransmissivity,
    k is a second element and R is a mean radius of a polygon. 
    Aperture is calculated according to cubic law as 
    b = (transmissivity*12)^(1/3) 
*/

/*===========================================================================*/
/*  Constant Aperture Option (aperture = 3)                                  */
/*===========================================================================*/
      
constantAperture: 1e-5  
//  Sets constant aperture for all fractures.

/*===========================================================================*/
/*  Length Correlated Aperture (aperture = 4)                                */
/*===========================================================================*/
       
lengthCorrelatedAperture: {5e-5, 0.5}
/*  Length Correlated Aperture Option:
    Aperture is calculated by: b=F*R^k,
    where F is a first element in lengthCorrelatedAperture, 
    k is a second element and R is a mean radius of a polygon.
*/

/*===========================================================================*/
/*===========================================================================*/
/*  Permeability Options                                                     */
/*  Mandaatory Parameter                                                     */
/*===========================================================================*/
/*===========================================================================*/

permOption: 0
/*  0 - Permeability of each fracture is a function of fracture aperture, 
        given by k=(b^2)/12, where b is an aperture and k is permeability
    1 - Constant permeabilty for all fractures 
*/

constantPermeability: 1e-12  //Constant permeability for all fractures 

/*===========================================================================*/
 